#region Usings
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;
using Microsoft.Win32;
using static System.Array;
using static System.Math;

// ReSharper disable InconsistentNaming
#pragma warning disable CS0675
#endregion

partial class Solution
{
    #region Variables
    const int MOD = 1000000007;
    const int FactCache = 1000;
    const long BIG = long.MaxValue >> 15;

    #endregion


    static long[,] array = 
    {
        {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, },
        {2, 8, 18, 32, 50, 72, 98, 128, 162, 200, 242, 288, 338, 392, 450, 512, 578, 648, 722, 800, 882, 968, 1058, 1152, 1250, 1352, 1458, 1568, 1682, 1800, 1922, 2048, 2178, 2312, 2450, 2592, 2738, 2888, 3042, 3200, 3362, 3528, 3698, 3872, 4050, 4232, 4418, 4608, 4802, 5000, },
        {3, 22, 75, 180, 355, 618, 987, 1480, 2115, 2910, 3883, 5052, 6435, 8050, 9915, 12048, 14467, 17190, 20235, 23620, 27363, 31482, 35995, 40920, 46275, 52078, 58347, 65100, 72355, 80130, 88443, 97312, 106755, 116790, 127435, 138708, 150627, 163210, 176475, 190440, 205123, 220542, 236715, 253660, 271395, 289938, 309307, 329520, 350595, 372550, },
        {4, 56, 282, 904, 2240, 4704, 8806, 15152, 24444, 37480, 55154, 78456, 108472, 146384, 193470, 251104, 320756, 403992, 502474, 617960, 752304, 907456, 1085462, 1288464, 1518700, 1778504, 2070306, 2396632, 2760104, 3163440, 3609454, 4101056, 4641252, 5233144, 5879930, 6584904, 7351456, 8183072, 9083334, 10055920, 11104604, 12233256, 13445842, 14746424, 16139160, 17628304, 19218206, 20913312, 22718164, 24637400, },
        {5, 132, 987, 4232, 13185, 33420, 73367, 144912, 263997, 451220, 732435, 1139352, 1710137, 2490012, 3531855, 4896800, 6654837, 8885412, 11678027, 15132840, 19361265, 24486572, 30644487, 37983792, 46666925, 56870580, 68786307, 82621112, 98598057, 116956860, 137954495, 161865792, 188984037, 219621572, 254110395, 292802760, 336071777, 384312012, 437940087, 497395280, 563140125, 635661012, 715468787, 803099352, 899114265, 4101333, 118675240, 243478105, 379180110, 526480093, },
        {6, 300, 3324, 19032, 74490, 227796, 586320, 1329264, 2734542, 5209980, 9328836, 15869640, 25860354, 40626852, 61845720, 91601376, 132447510, 187472844, 260371212, 355515960, 478038666, 633912180, 830037984, 74337865, 375849943, 744828949, 192850886, 732922010, 379592061, 149071912, 59355461, 130345878, 383986165, 844394036, 538001110, 493696452, 742974392, 320086685, 262199012, 609551759, 405625137, 697308643, 535074792, 973157225, 69733074, 887109738, 491915846, 955296694, 353113862, 766149270, },
        {7, 662, 10911, 83380, 409655, 1510602, 4557007, 11855816, 27537255, 58478110, 115496447, 214853052, 380094871, 644275730, 52589608, 665451785, 562063033, 844492305, 642313020, 117828364, 471920810, 950561137, 852012284, 534763277, 426228502, 32247618, 947421418, 866318827, 595590471, 67023929, 351576067, 674417657, 431025631, 204358208, 783148167, 181349546, 658773131, 742945840, 252229478, 320234017, 421560695, 398910270, 491591660, 365466256, 144363209, 443000950, 401450216, 721173911, 702679005, 284815828, },
        {8, 1440, 35220, 358856, 2211240, 9826008, 34726580, 103648560, 271757736, 643154480, 400977901, 849745706, 472888165, 8757346, 548715101, 661226005, 546204024, 224184101, 765212563, 562672693, 657584525, 119240249, 488359439, 289270611, 617948458, 813058375, 217482706, 38125551, 312115538, 987848623, 129635429, 255040321, 814321743, 821706225, 648550783, 988771058, 7235121, 682145508, 352754329, 484079317, 660610725, 821321959, 748619150, 824187533, 65015005, 453195885, 573440277, 572537270, 455342489, 732183260, },
        {9, 3084, 112257, 1524816, 11775825, 63020124, 260811369, 892771392, 641743787, 966492258, 734736577, 218317645, 588547238, 81328365, 36428409, 53349064, 547565354, 35499723, 524457207, 434873221, 536617496, 438754965, 233088176, 955995103, 600531607, 481489205, 830085753, 572220021, 324740066, 727960220, 319712474, 246534860, 201181992, 72491777, 893756720, 779128741, 644232955, 617077948, 158528546, 28051129, 350151594, 159902148, 932195011, 728868837, 730627666, 56711578, 914584142, 264472951, 329437366, 430740462, },
        {10, 6532, 354534, 6418720, 62086330, 399920340, 937262495, 602791535, 383550235, 574473342, 527275491, 269481312, 733687432, 38125909, 328538900, 164562551, 347543247, 477258102, 428673240, 392935003, 165539316, 25350811, 867133955, 263801411, 878968305, 161912360, 571968285, 734016504, 957351384, 493118605, 796984763, 940031603, 208341297, 886645156, 270034578, 126368061, 176938743, 710482717, 231995782, 109374472, 553893321, 991263143, 984771918, 397079133, 458903998, 887405771, 200788679, 944862362, 718239408, 691842998, },
        {11, 13728, 1111965, 26829152, 324852015, 517190162, 266310415, 169290112, 674954620, 872338950, 493865378, 323655882, 749782537, 237467835, 255832222, 330384524, 522784522, 303281264, 463537684, 841267146, 55291809, 481431460, 76275016, 556691013, 486296771, 63514882, 345868196, 217456077, 985853944, 894808784, 312974848, 598538639, 775999834, 764767534, 978847067, 121064566, 811421964, 643795941, 123878701, 908676759, 487794288, 1970711, 806844201, 620685550, 43985583, 745464641, 951570693, 772193131, 500577188, 935799701, },
        {12, 28676, 3468642, 111528168, 689650953, 742315347, 344472638, 750610913, 64562560, 203822552, 849114877, 817741548, 437095862, 284582965, 774787491, 345558427, 160040507, 694679386, 119810198, 946404216, 855568086, 439029327, 646574382, 90638776, 920337371, 307490593, 632962846, 305199907, 749580376, 73471240, 213156697, 107630278, 598246763, 923185270, 833484989, 594145305, 407678582, 682010557, 996402204, 646017228, 175036176, 854252177, 491599677, 256105072, 171677988, 20708607, 359693666, 56567196, 921956146, 925538493, },
        {13, 59592, 10772925, 461613424, 747183749, 947876689, 995495811, 414832480, 39978550, 846365249, 751666828, 938228874, 520723749, 372213594, 286715201, 462394491, 860897210, 718950436, 554228518, 130300621, 907692257, 169031889, 259635992, 67569004, 119218343, 342217418, 578615344, 639856212, 59664304, 571920083, 608596105, 827209457, 116489851, 222009680, 832537262, 572227583, 775289347, 949291574, 858418709, 932232882, 18540246, 808278597, 274126899, 675802549, 857029682, 162147837, 899397413, 872309838, 814213340, 283898559, },
        {14, 123316, 33339510, 903934041, 112775275, 905615202, 185515814, 450178816, 87828801, 305249993, 94393199, 364496540, 112764145, 846074981, 692415059, 373777892, 500718854, 68782311, 284843599, 324871671, 490252144, 471287566, 370603927, 955396303, 277057513, 47829218, 868218617, 925540348, 809004615, 351076385, 918526357, 765792604, 354845158, 886384100, 92798582, 374742580, 24537807, 834985207, 597006580, 632707934, 362992984, 575557678, 228970773, 220202005, 241010261, 527144218, 833535319, 900718967, 307805718, 906171980, },
        {15, 254278, 102871947, 830261179, 949689358, 781245981, 179847512, 116843819, 274367182, 395998096, 261917412, 648475791, 672742661, 99179057, 795533878, 203407635, 287195595, 186725101, 991079737, 328983418, 364817461, 820388092, 691320663, 988141202, 610788899, 781274994, 542882464, 712790603, 562271486, 19121839, 977634605, 651662675, 212346662, 875522141, 941654293, 678127392, 614585779, 845818862, 240971078, 426080997, 597453458, 84040112, 74909148, 138549274, 977232264, 96868790, 357962565, 328756760, 701785982, 313885906, },
        {16, 522800, 316628322, 126079224, 552373137, 589485470, 965711555, 101480751, 361240051, 734357882, 826498639, 634489474, 633546041, 744638842, 761091537, 99948833, 284108911, 10005495, 599969233, 876171915, 869510178, 531240562, 236961184, 149453949, 769563788, 525361699, 349009096, 823751310, 956908303, 587641884, 366710566, 617102242, 797576872, 174181199, 332337860, 877067691, 750801060, 804147807, 281491966, 255679085, 635160131, 262926530, 865396560, 648444449, 214348218, 253623106, 899045309, 870366275, 377279426, 7103906, },
        {17, 1072244, 972469713, 539326795, 649779056, 32153404, 853708443, 168870301, 612142144, 483754413, 893514259, 514441452, 510128145, 736892071, 887410784, 838133164, 766211557, 337823721, 547726729, 604805297, 67729527, 958654616, 975376464, 457449382, 401212808, 723476640, 414268459, 671142256, 823370383, 112538248, 186135884, 492017560, 332954377, 202648954, 346536895, 841405693, 398128630, 306206828, 936943022, 519378614, 568059557, 324248400, 63626889, 493918564, 590307073, 437520761, 465624308, 539916973, 763549035, 991916336, },
        {18, 2194472, 981281144, 644223225, 126990644, 879236289, 209520947, 881965552, 795715809, 641738109, 540021220, 661477599, 142700837, 759888421, 71104115, 130464077, 180866677, 831969701, 113513746, 180163430, 418368753, 565669488, 180487415, 605735614, 208568524, 54413327, 270775658, 942028525, 112050558, 20613252, 856302640, 815364243, 379125669, 324484028, 88589692, 152094443, 226425456, 171616797, 485494005, 851458071, 32380636, 170618122, 146722058, 806387946, 24442207, 327917674, 793769517, 66783117, 131345101, 308502203, },
        {19, 4483076, 125021646, 196663706, 187854216, 341834194, 56025234, 892022255, 215571438, 206618519, 687720086, 792251158, 618929801, 46054007, 983515251, 533842602, 886268877, 697133054, 814610242, 344892114, 452865136, 278329048, 983503708, 719123937, 722286605, 508375730, 984566678, 235617253, 332910186, 539661320, 295781775, 512042481, 63648639, 652818727, 693029665, 910687823, 869092882, 511353856, 522428166, 199519938, 769338329, 132557330, 761691994, 471772697, 270913304, 524344353, 429644641, 284267826, 306774194, 558804269, },
        {20, 9143940, 890376135, 891780406, 182072001, 635950649, 630344000, 660600649, 100530603, 368334248, 456733334, 80704398, 51377259, 889811476, 942670773, 957492314, 519368056, 254964795, 745218845, 428501993, 837249039, 82581097, 109635177, 168960097, 765445478, 811943398, 231393451, 132240832, 886708906, 327598728, 586664442, 196833834, 340149068, 813579760, 674982847, 148448527, 800092317, 907655484, 683483624, 531726054, 396755647, 254973017, 778887121, 891072770, 283808977, 42816162, 832086672, 849183128, 192881715, 402764043, },
        {21, 18624636, 140386120, 619069821, 555998399, 710948761, 623886445, 553777533, 34661323, 507464182, 916139495, 932407174, 860614340, 28826877, 414924181, 772877048, 316059005, 797560115, 937501080, 282191843, 162136422, 31776410, 162540321, 593082027, 995569878, 572867063, 660537048, 826680962, 342988186, 850004745, 516652431, 272053756, 645771332, 631116157, 152517680, 956554055, 925466921, 667168000, 499818595, 325800008, 873344075, 185577670, 239226304, 816775362, 807520206, 292857732, 165518731, 986230466, 796950541, 676052627, },
        {22, 37888992, 619774591, 770440735, 505291564, 749006531, 12065766, 101322808, 580405800, 525483645, 501253694, 546744247, 814212646, 684480708, 661523332, 959224625, 283905139,
            168614983, 847348235, 807356705, 633343764, 385110475, 342177337, 484499131, 985496315,
            828305792, 886598579, 342122359, 948776522, 38749399, 43140874, 233709590, 707599734, 14792875,
            465656729, 88178257, 631048859, 339421350, 179970731, 497696089, 487630182, 144231537,
            155346661, 60167510, 476622346, 276330364, 904608064, 345866558, 301750858, 976201193, },
        {23, 76996212, 882522763, 704186260, 938677601, 511065267, 312545310, 472646844, 292417923,
            38174135, 48242290, 121911630, 61434833, 895700510, 890162994, 388496340, 904599894, 173616266,
            939703247, 50543500, 169192643, 324429460, 634382534, 493529025, 466969877, 46382375,
            820216737, 882806185, 174731382,182939842, 377548559, 716698647, 850316653, 994090660,
            713713022, 409192447, 796555402, 976047575, 378841381, 392821544,980679590,149974535, 91274428,
            865109504,378023033, 437445484, 28832990,  258817606, 25514141, 479799301, },
        {24, 156317472, 144118651, 960545463, 581163690, 3157081, 697579398, 142701422, 110476911,
            199623809, 266486823, 762033486, 989708211,330584762, 405635991, 583232925, 532268860,
            943295597,359138696, 758796263, 366681416, 845457426, 781533052, 6306190, 327273264,
            649231629, 816573537, 365880793, 928395359, 832459376, 652099453, 768959160,
            821267713, 59562294, 12748794,  474045228, 837901904, 444074420, 379564498,
            905656178, 365954513, 328570222,863208023, 632216404,  595542914, 579582050,
            499198478, 482600447,366832553, 574756339, },
        {25, 317081720, 587805291, 791985395, 38301051, 778925680, 6007321, 281565544, 856452597,
            156429951,156106812,428748351,761546056, 377293242, 373710198, 14630858, 704285194,
            110048866, 773089195, 426630169, 315527380, 729038416, 419886782, 751985065, 104490936,
            491503990,722416764, 848225625, 92625351,456155712,695710021, 918079120,850001281,
            472349421, 628583263, 898419603, 548671567, 728757882,  8825855, 666110121, 113002444, 485912432, 22015331, 929275911, 237282526, 665104956, 350519025, 98661648, 420849227,
            994851449,
        },
        {26, 642684368, 253913267, 844383427, 592177392, 104129628, 278882330, 910097280, 574614443, 658743273, 979993339, 976025638, 626717839, 459156786, 213739735, 958666490, 429365902, 207164064, 485570827, 200292250, 22045472, 770044948, 145036760, 614127987, 246561533, 559681539, 14684496, 146713513, 954468573, 504402865, 893995553, 579172563, 500646270, 928926322, 510723411, 194269689, 596924199, 248277017, 874082397, 298296044, 959533150, 894905193, 601014104, 673549985, 793099630, 482606195, 740460158, 616244659, 574342253, 304031567, },
        {27, 301724989, 54420686, 255338646, 669937486, 163230111, 540940, 961853670, 955341110, 813621553, 220944299, 323920286, 272303574, 278621531, 914007406, 219503493, 603198325, 721152577, 952364823, 856831427, 507516874, 286493594, 412099408, 354626738, 146047924, 17166588, 772453449, 208829478, 954689997, 134448814, 731338564, 341869319, 116821043, 593780682, 464726344, 890401818, 759669293, 686252084, 307134225, 313789482, 696596724, 135854940, 988280612, 836052288, 738407250, 473538753, 651197457, 550623038, 801165790, 291113502, },
        {28, 634897414, 887111506, 671570584, 417279051, 329960470, 463799351, 637046612, 460545757, 376146163, 952775983, 658963707, 410415751, 880860731, 93810623, 169052004, 984508312, 646328105, 928626743, 337931317, 698810738, 447004764, 684757915, 382134979, 229477331, 793558826, 988893028, 267221351, 741198257, 849385191, 500447092, 249496498, 984521786, 875012217, 404114592, 153427734, 802402532, 16194388, 208230751, 25349993, 81448044, 89659280, 384589063, 35725882, 623653265, 147673882, 895390637, 610777562, 986585172, 845366020, },
        {29, 330347437, 252784620, 273241879, 355729865, 598102399, 3505393, 23055974, 561209598, 368714708, 80742124, 867483141, 552314861, 427949835, 458905314, 504123594, 19957725, 88837848, 269312427, 160840978, 497350320, 370709731, 494002306, 536351090, 927709554, 753514622, 895325283, 366213125, 199770857, 660628417, 185431799, 932582719, 520383694, 133979826, 954027187, 992446128, 695724207, 923842551, 629886602, 448998491, 311963317, 842616565, 264173687, 893567527, 640458219, 495985942, 960187726, 506619681, 395995225, 996770894, },
        {30, 777448822, 482133645, 736100513, 646722748, 377509968, 590073067, 709121568, 570318683, 580580390, 476807486, 891448402, 750212214, 401993461, 376513145, 507568294, 647622654, 540455562, 161039426, 87510709, 15262133, 668333272, 19944502, 453435698, 448952289, 657050976, 640594733, 474380262, 139933365, 682418882, 852287704, 701412436, 837642860, 478825111, 336083251, 124801125, 869970022, 864100100, 164276888, 62245233, 308103985, 955176985, 589430302, 804799464, 743352063, 81821341, 931036521, 451549646, 581145245, 693152120, },
        {31, 780302123, 802001041, 353951249, 835037256, 498252878, 660309222, 952804793, 55220626, 465520774, 115446406, 689970270, 454055193, 703210085, 898732712, 165052994, 78807444, 670054600, 560739965, 886156464, 406627340, 521158267, 646834070, 164018919, 351724931, 50218565, 116752471, 45952002, 811945885, 599168041, 820781453, 842840764, 157818525, 473923975, 665238755, 508721391, 389519413, 559058751, 808278866, 594462402, 626882828, 324318908, 904291154, 482196581, 737169766, 600388115, 460323388, 191512187, 970600200, 608648989, },
        {32, 996281647, 356368913, 156453704, 193434113, 173861634, 913334152, 883282593, 307751370, 685252388, 378861365, 510534220, 579604029, 71264086, 958853292, 88563783, 311662906, 358296332, 277790324, 45925377, 5193021, 868563855, 821703152, 838613052, 3167604, 83341920, 971527330, 120509002, 643704466, 613056429, 169820626, 836346688, 550232885, 126050293, 360173703, 482173754, 806315881, 648040796, 328924734, 770426124, 43289734, 203453252, 995433566, 541381783, 404661715, 612058192, 379123689, 608088989, 529763281, 24843490, },
        {33, 835592384, 879544825, 948815840, 494093348, 459471146, 398666704, 87898095, 810810455, 662420700, 968270774, 684582709, 498404304, 261746435, 101977361, 586772491, 434038768, 132712727, 648858369, 348716004, 457767456, 714402137, 541183144, 749384761, 231200869, 313890657, 675563014, 62529635, 424763681, 994286132, 470551975, 748681413, 37858278, 323500364, 452016325, 54275523, 554576069, 18140478, 368986160, 879615236, 290082825, 115612071, 677229789, 633445679, 15045590, 505977453, 942120638, 516342481, 395034464, 785681874, },
        {34, 304103371, 252493145, 445107307, 73575147, 7326313, 406540889, 477218301, 526697362, 348234008, 129714889, 389024962, 675067770, 314519677, 33201357, 644367517, 197087656, 572331178, 142043884, 216537912, 778443471, 733747325, 120038722, 93692973, 343607117, 598692872, 518902135, 755844225, 677578325, 344668450, 384940966, 289897743, 630169602, 166413986, 455868798, 949933020, 721501941, 790078273, 978394420, 320840452, 476102120, 113852958, 365406232, 233440769, 692901526, 259015447, 575686013, 23877580, 581979289, 888644800, },
        {35, 774143361, 210013606, 771604881, 43592868, 728053236, 638448749, 297574810, 192268811, 161610315, 212070653, 8779456, 55197199, 586277293, 675256120, 188141506, 709701401, 863523530, 376553682, 497207115, 548359871, 475872389, 641406634, 119253091, 505412451, 335777179, 622894592, 272333526, 780993207, 524268121, 176236491, 384530531, 381353397, 938043928, 605184083, 42282755, 15982659, 141826726, 53143666, 451499973, 836630570, 594363608, 232673689, 720790959, 878480659, 933281055, 239993145, 978474734, 625206915, 198153784, },
        {36, 691985221, 954654933, 67489036, 659311166, 266482791, 716015326, 530642040, 878833653, 599428263, 984336529, 793143325, 394846392, 52271550, 406648759, 288763298, 412750208, 894743148, 356000376, 728928659, 613058677, 859354384, 372533161, 151377179, 157364353, 549157202, 114682343, 910108233, 546233324, 443567639, 612319855, 160038959, 765314173, 779172649, 34180718, 850643784, 895307600, 976644900, 534470063, 618445075, 335969267, 310092911, 230668671, 264752778, 179618856, 196857069, 714393286, 173099506, 788095202, 919617207, },
        {37, 316289727, 110390905, 82781268, 259766026, 472751514, 642338989, 730443532, 157669887, 880271979, 9182439, 157793671, 705130777, 914988444, 74598432, 21607974, 264996404, 114762360, 813459475, 786145950, 99633289, 279394702, 509847972, 681258295, 128071950, 17374640, 992509136, 492972690, 47325042, 333101076, 303769136, 182514986, 600418591, 170416019, 971105210, 815324894, 911534655, 74912590, 356749243, 54173929, 940100935, 549473117, 226176172, 925528201, 1180289, 197362348, 692191796, 358668698, 859159145, 282761920, },
        {38, 826072821, 664801288, 983540429, 724117424, 48125972, 631067289, 716442561, 15257470, 17221556, 673072748, 849168415, 403819045, 276762007, 650030631, 197970630, 65410753, 150391463, 591897144, 272989073, 664302668, 267481272, 822093011, 775739570, 752393469, 981735776, 174301412, 438862005, 115777847, 171780781, 255284568, 610031285, 179025748, 876570419, 892392600, 616800002, 285182694, 846162597, 295591823, 611315197, 312986061, 822434977, 740651861, 441936699, 254893779, 86623851, 271742693, 922228024, 617531463, 751712405, },
        {39, 768593780, 407903143, 282314285, 55465492, 654626144, 305785507,
            561338184, 102844101, 523700587,231426720, 106716423,543184105,
            56713729, 597024354, 59916408, 349057217, 521945084,95080609,266900412,
            756193325, 902964287, 945331957, 658904979, 808277768, 84345903, 311319977, 528789319, 257328679, 868120573, 399544305, 831963695, 234414170, 950622524, 289506815, 146707392, 252643100, 786631502, 118290208, 485279367, 240693410, 170810812, 511427495, 756211806, 148819185, 69533512,
            // Cool
            75327914,151346681,506126226,540315252
        },
        {40, 361348237, 70119377, 921548873, 618374794, 9885763, 234233162, 705320569, 217269282, 562480875, 151752373, 486119527, 365634957, 238528222, 639307112, 241987959, 8868507, 35229898, 271247803, 186835948, 267765363, 693839507, 320457816, 91676603, 917585074, 32327032, 162273532, 304901648, 939929170, 585933255, 87980347, 33963396, 910356385, 575751014, 337553629, 325780780, 220411848, 246540169, 143687043, 688113817, 593046344, 303002647, 26365179, 352966213, 895445590, 212668235, 231384618, 393453623, 161155001, 108122413, },
        {41, 798183901, 641870929, 44714374, 846879544, 393034384, 282484828, 214549840, 804817434, 19807319, 444753022, 876806235, 500323030, 970770565, 561232395, 438590847, 748848358, 705997266, 967618376, 52056022, 232150467, 172061636, 536615171, 129040157, 612690929, 848236341, 481358589, 799274304, 573529436, 53363550, 207005903, 665739516, 987336046, 437524999, 921995216, 140694307, 474142813, 55013409, 204232264, 679067752, 708200953, 700810155, 503963205, 575562490, 424906041, 838937566, 887370334, 503793795, 479433644,444257157},
        {42, 54920657, 267274244, 83622990, 819709518, 706464193, 73881627, 676872709, 859690668, 948274185, 864635361, 767376919, 397935850, 460416014, 637700097, 971643350, 814155105, 721192883, 647089396, 137637394, 522174096,
            735847861, 451975819, 986029971, 137446297, 630231446, 912032680,
            499261199, 325352088, 478092494, 149904018, 525051829, 70727494, 905218654,760152916, 84235631, 233024734,654223960, 814313558, 434301302,0,0,0,0,0,0,0,0,0,0
        },
        {43, 483668740, 347005496, 131938579, 561507926, 700271729, 225077490, 634661551, 888809731, 187130295, 407253286, 531937846,841231009,597098796,
            717199785, 734830506,226845038,926894593, 415081865,337823121,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,321680667,824529654,851938902,0,0,0,0,0,0,0,0,0,0,0,0
        },
        {44, 193961546, 332562739, 671331641, 617687241,568879698,
            376033378, 885904070,689049335, 997525624,0,0,0,0,0,302298254,696134706,428742311,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        },
        {45, 716717970, 439120579, 587819086,  162901439,  656724924, 0,0,0,0,0,0,0,0,0,616390631,157567483,378508786,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,282158201,0,0,0,0,0,0,0,0
        },
        {46, 288894431, 86766433, 0, 0, 0, 0,0,0,0,0,0,0,0,0,864790517,623615476,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        },
        {47, 0, 632669122, 0, 0, 0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        },
        {48, 0, 0, 0, 0, 0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,365318591,0,0
        },
        {49, 0, 0, 0, 0, 0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        },
    };


    int[,] kEquals2 =
    {
        {0, 2, 8, 22, 56, 132, 300, 662, 1440, 3084, 6532, 13728, 28676, 59592, 123316, 254278, 522800, 1072244, 2194472, 4483076, 9143940, 18624636, 37888992, 76996212, 156317472, 317081720, 642684368, 301724989, 634897414, 330347437, 777448822, 780302123, 996281647, 835592384, 304103371, 774143361, 691985221, 316289727, 826072821, 768593780, 361348237, 798183901, 54920657, 483668740, 193961546, 716717970, 288894431, 868795546, 550861058, 953219338, },
        {0, 3, 18, 75, 282, 987, 3324, 10911, 35220, 112257, 354534, 1111965, 3468642, 10772925, 33339510, 102871947, 316628322, 972469713, 981281144, 125021646, 890376135, 140386120, 619774591, 882522763, 144118651, 587805291, 253913267, 54420686, 887111506, 252784620, 482133645, 802001041, 356368913, 879544825, 252493145, 210013606, 954654933, 110390905, 664801288, 407903143, 70119377, 641870929, 267274244, 347005496, 332562739, 0,0,0,0,0 },
    };


    int n, k;
    long[,] dp;

    void Solve()
    {
        //Console.Error.WriteLine("//" + Assembly.GetEntryAssembly().FullName);
        //Console.Error.WriteLine("//");
        //GridVisualization.DisplayGridAsArray(39, 50, 1, 50, (n, k) =>
        //{
        //    this.n = n;
        //    this.k = k;
        //    return Brute(n, k);
        //}, Console.Error.Write);

        //int bounds = 43;
        //long[] test = new long[bounds];
        //for (int i = 0; i < bounds; i++)
        //{
        //    test[i] = array[40, i];
        //}

        //var extended = NewtonInterpolationMod.Extend(test, 50);


        n = Ni();
        k = Ni();

        dp = new long[n + 1, k + 1];

        long result = Brute(n, k);
        WriteLine(Fix(result));
    }

    public class NewtonInterpolationMod
    {
        readonly long[] x;
        readonly long[] y;
        int n;

        public NewtonInterpolationMod(IList<long> xvalues, IList<long> yvalues)
        {
            n = xvalues.Count;
            x = xvalues.ToArray();
            y = yvalues.ToArray();

            for (int j = 0; j < n; j++)
            for (int i = n - 1; i > j; i--)
                y[i] = Div(y[i] - y[i - 1], x[i] - x[i - j - 1]);
        }

        public NewtonInterpolationMod(IList<long> yvalues)
        {
            x = new long[yvalues.Count];
            for (int i = 0; i < yvalues.Count; i++)
                x[i] = i;

            n = yvalues.Count;
            y = yvalues.ToArray();

            for (int j = 0; j < n; j++)
            for (int i = n - 1; i > j; i--)
                y[i] = Div(y[i] - y[i - 1], i - (i - j - 1));
        }

        public static long[] Extend(IList<long> values, int size)
        {
            var nt = new NewtonInterpolationMod(values);
            var extended = new long[size];
            for (int i = 0; i < values.Count; i++)
                extended[i] = values[i];
            for (int i = values.Count; i < size; i++)
                extended[i] = Fix(nt.Interpolate(i));
            return extended;
        }

        public unsafe long Interpolate(long a, int n = 0)
        {
            if (n == 0) n = this.n;
            long sum = 0;
            var factors = stackalloc long[n];
            var f = factors[0] = 1;
            for (int i = 1; i < n; i++)
            {
                var amx = a - x[i - 1];
                if ((ulong)amx >= (ulong)MOD) amx %= MOD;
                factors[i] = f = Mult(f, amx);
            }
            for (int i = n - 1; i >= 0; i--)
                sum += Mult(factors[i], y[i]);
            return sum % MOD;
        }
    }

    long Dp(int n, int k)
    {
        ref var result = ref dp[n, k];
        if (result != 0)
            return result - 1;

        dp[n, k] = result + 1;
        return result;
    }


    int[] pattern;
    int[] z;
    int[] Lps;
    long[,,] Cache;
    long[,,] CacheTime;
    long[] Times;
    long time;

    long Brute(int n, int k)
    {
        this.n = n;
        this.k = k;

        if (k == 1) return n - 1;
        if (n == 2) return k;
        if (n == 3) return Mult(2, ModPow(k, 2));

        long result = 0;
        if (n <= array.GetLength(0))
            result = array[n - 2, k - 1];

        if (result == 0 && k - 2 < kEquals2.GetLength(0))
            result = kEquals2[k - 2, n - 1];

        if (result != 0)
            return result;

        pattern = new int[n];
        z = new int[n];
        Lps = new int[n + 1];
        Lps[0] = -1;
        Cache = new long[n + 1, n + 1, n + 1];
        CacheTime = new long[n + 1, n + 1, n + 1];

        Times = new long[n + 2];
        for (int i = 0; i < Times.Length; i++)
            Times[i] = -1;

        return Mult(k, BruteCore(1));
    }

    unsafe long BruteCore(int index, int t = 0, long used = 1, int max = 0)
    {
        if (t > max) max = t;

        int len = pattern.Length - index;
        if (t + len <= max)
            return len == 0 ? max : max * ModPow(k, len) % MOD;

        long total = 0;
        long cacheUsed = 0L;
        long* cache = stackalloc long[51];

        for (int ch = 0; ch < k; ch++)
        {
            pattern[index] = ch;
            Times[index + 1] = ++time;

            var lps = t;
            bool seen = ch < used;
            if (seen)
            {
                while (lps >= 0 && ch != pattern[lps])
                    lps = Lps[lps];
                lps++;
            }
            else
            {
                lps = 0;
                used++;
            }

            Lps[index + 1] = lps;
            long brute;
            if ((cacheUsed & 1L << lps) != 0)
            {
                brute = cache[lps];
            }
            else
            {
                var patternLen = Min(index, lps + len - 1);
                if (CacheTime[index, lps, max] == Times[patternLen])
                {
                    brute = Cache[index, lps, max];
                }
                else
                {
                    brute = BruteCore(index + 1, lps, used, max);
                    Cache[index, lps, max] = brute;
                    CacheTime[index, lps, max] = Times[patternLen];
                }
                cache[lps] = brute;
                cacheUsed |= 1L << lps;
            }

            if (seen)
                total += brute;
            else
            {
                total += brute * (k - ch);
                break;
            }
        }

        while (total >= MOD) total -= MOD;

        return total;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    static int BitCount(long y)
    {
        var x = unchecked((ulong)y);
        x -= (x >> 1) & 0x5555555555555555;
        x = (x & 0x3333333333333333) + ((x >> 2) & 0x3333333333333333);
        x = (x + (x >> 4)) & 0x0f0f0f0f0f0f0f0f;
        return unchecked((int)((x * 0x0101010101010101) >> 56));
    }

    long MathApproach(int n, int k)
    {
        long[] counts = new long[n + 1];

        for (int len = 1; len < n; len++)
        {
            var dp = new long[n + 1];
            for (int i = n - len; i >= len; i++)
            {
                dp[i] = ModPow(k, n - len - (i + len));
                // i = n - len  ==> p = len
                // i = len => p = n - 3*len
            }

            for (int i = len - 1; i >= 1; i++)
            {
                dp[i] = ModPow(k, n - (i + len));
            }


            for (int i = n - len; i >= 1; i++)
            {
                dp[i] -= dp[i + 1];
            }

            long count = 0;
            for (int i = 0; i < n; i++)
                count += dp[i];

            counts[len] = count;
        }

        long total = 0;
        //for (int i = n - 2; i > 0; i--)
        for (int i = 1; i + 1 < n; i++)
            counts[i] -= counts[i + 1];

        for (int i = 1; i < n; i++)
            total += i * 1L * counts[i] % MOD;

        return total % MOD;
    }

    public static long MultAlt(long a, long b, long mod)
    {
        long q = (long)((double)a * b / mod);
        long result = unchecked(a * b - mod * q);
        result %= mod;
        if (result < 0) result += mod;
        return result;
    }


    #region Library
    #region Mod Math

    static int[] _inverse;
    static long Inverse(long n)
    {
        long result;

        if (_inverse == null)
            _inverse = new int[1000];

        if (n >= 0 && n < _inverse.Length && (result = _inverse[n]) != 0)
            return result - 1;

        result = InverseDirect((int)n);
        if (n >= 0 && n < _inverse.Length)
            _inverse[n] = (int)(result + 1);
        return result;
    }

    public static int InverseDirect(int a)
    {
        int t = 0, r = MOD, t2 = 1, r2 = a;
        while (r2 != 0)
        {
            var q = r / r2;
            t -= q * t2;
            r -= q * r2;

            if (r != 0)
            {
                q = r2 / r;
                t2 -= q * t;
                r2 -= q * r;
            }
            else
            {
                r = r2;
                t = t2;
                break;
            }
        }
        return r <= 1 ? (t >= 0 ? t : t + MOD) : -1;
    }

    static long Mult(long left, long right) =>
        (left * right) % MOD;

    static long Div(long left, long divisor) =>
        left * Inverse(divisor) % MOD;

    static long Fix(long n) => (n %= MOD) >= 0 ? n : n + MOD;

    static long ModPow(long n, long p, long mod = MOD)
    {
        long b = n;
        long result = 1;
        while (p != 0)
        {
            if ((p & 1) != 0)
                result = (result * b) % mod;
            p >>= 1;
            b = (b * b) % mod;
        }
        return result;
    }

    static List<long> _fact;

    static long Fact(int n)
    {
        if (_fact == null) _fact = new List<long>(FactCache) { 1 };
        for (int i = _fact.Count; i <= n; i++)
            _fact.Add(Mult(_fact[i - 1], i));
        return _fact[n];
    }

    static long[] _ifact = new long[0];
    static long InverseFact(int n)
    {
        long result;
        if (n < _ifact.Length && (result = _ifact[n]) != 0)
            return result;

        var inv = Inverse(Fact(n));
        if (n >= _ifact.Length) Resize(ref _ifact, _fact.Capacity);
        _ifact[n] = inv;
        return inv;
    }

    static long Fact(int n, int m)
    {
        var fact = Fact(n);
        if (m < n) fact = fact * InverseFact(n - m) % MOD;
        return fact;
    }

    static long Comb(int n, int k)
    {
        if (k <= 1) return k == 1 ? n : k == 0 ? 1 : 0;
        return Mult(Mult(Fact(n), InverseFact(k)), InverseFact(n - k));
    }
    #endregion

    #region Fast IO
    #region  Input
    static Stream inputStream;
    static int inputIndex, bytesRead;
    static byte[] inputBuffer;
    static StringBuilder builder;
    const int MonoBufferSize = 4096;
    const char NL = (char)10, DASH = (char)45, ZERO = (char)48;

    static void InitInput(Stream input = null, int stringCapacity = 16)
    {
        builder = new StringBuilder(stringCapacity);
        inputStream = input ?? Console.OpenStandardInput();
        inputIndex = bytesRead = 0;
        inputBuffer = new byte[MonoBufferSize];
    }

    static void ReadMore()
    {
        if (bytesRead < 0) throw new FormatException();
        inputIndex = 0;
        bytesRead = inputStream.Read(inputBuffer, 0, inputBuffer.Length);
        if (bytesRead > 0) return;
        bytesRead = -1;
        inputBuffer[0] = (byte)NL;
    }

    static int Read()
    {
        if (inputIndex >= bytesRead) ReadMore();
        return inputBuffer[inputIndex++];
    }

    static T[] Na<T>(int n, Func<T> func)
    {
        var list = new T[n];
        for (int i = 0; i < n; i++) list[i] = func();
        return list;
    }

    static int[] Ni(int n) => Na(n, Ni);

    static long[] Nl(int n) => Na(n, Nl);

    static string[] Ns(int n) => Na(n, Ns);

    static int Ni() => checked((int)Nl());

    static long Nl()
    {
        var c = SkipSpaces();
        bool neg = c == DASH;
        if (neg) { c = Read(); }

        long number = c - ZERO;
        while (true)
        {
            var d = Read() - ZERO;
            if (unchecked((uint)d > 9)) break;
            number = number * 10 + d;
            if (number < 0) throw new FormatException();
        }
        return neg ? -number : number;
    }

    static char[] Nc(int n)
    {
        var list = new char[n];
        for (int i = 0, c = SkipSpaces(); i < n; i++, c = Read()) list[i] = (char)c;
        return list;
    }

    static string Ns()
    {
        var c = SkipSpaces();
        builder.Clear();
        while (true)
        {
            if (unchecked((uint)c - 33 >= (127 - 33))) break;
            builder.Append((char)c);
            c = Read();
        }
        return builder.ToString();
    }

    static int SkipSpaces()
    {
        int c;
        do c = Read(); while (unchecked((uint)c - 33 >= (127 - 33)));
        return c;
    }

    static string ReadLine()
    {
        builder.Clear();
        while (true)
        {
            int c = Read();
            if (c < 32) { if (c == 10 || c <= 0) break; continue; }
            builder.Append((char)c);
        }
        return builder.ToString();
    }
    #endregion

    #region Output
    static Stream outputStream;
    static byte[] outputBuffer;
    static int outputIndex;

    static void InitOutput(Stream output = null)
    {
        outputStream = output ?? Console.OpenStandardOutput();
        outputIndex = 0;
        outputBuffer = new byte[65535];
    }

    static void WriteLine(object obj = null)
    {
        Write(obj);
        Write(NL);
    }

    static void WriteLine(long number)
    {
        Write(number);
        Write(NL);
    }

    static void Write(long signedNumber)
    {
        ulong number = unchecked((ulong)signedNumber);
        if (signedNumber < 0)
        {
            Write(DASH);
            number = unchecked((ulong)(-signedNumber));
        }

        Reserve(20 + 1); // 20 digits + 1 extra for sign
        int left = outputIndex;
        do
        {
            outputBuffer[outputIndex++] = (byte)(ZERO + number % 10);
            number /= 10;
        }
        while (number > 0);

        int right = outputIndex - 1;
        while (left < right)
        {
            byte tmp = outputBuffer[left];
            outputBuffer[left++] = outputBuffer[right];
            outputBuffer[right--] = tmp;
        }
    }

    static void Write(object obj)
    {
        if (obj == null) return;

        var s = obj.ToString();
        Reserve(s.Length);
        for (int i = 0; i < s.Length; i++)
            outputBuffer[outputIndex++] = (byte)s[i];
    }

    static void Write(char c)
    {
        Reserve(1);
        outputBuffer[outputIndex++] = (byte)c;
    }

    static void Write(byte[] array, int count)
    {
        Reserve(count);
        Copy(array, 0, outputBuffer, outputIndex, count);
        outputIndex += count;
    }

    static void Reserve(int n)
    {
        if (outputIndex + n <= outputBuffer.Length)
            return;

        Dump();
        if (n > outputBuffer.Length)
            Resize(ref outputBuffer, Max(outputBuffer.Length * 2, n));
    }

    static void Dump()
    {
        outputStream.Write(outputBuffer, 0, outputIndex);
        outputIndex = 0;
    }

    static void Flush()
    {
        Dump();
        outputStream.Flush();
    }

    #endregion
    #endregion

    #region Main

    public static void Main()
    {
        AppDomain.CurrentDomain.UnhandledException += (sender, arg) =>
        {
            Flush();
            var e = (Exception)arg.ExceptionObject;
            Console.Error.WriteLine(e);
            var line = new StackTrace(e, true).GetFrames()
                .Select(x => x.GetFileLineNumber()).FirstOrDefault(x => x != 0);
            var wait = line % 300 * 10 + 5;
            var process = Process.GetCurrentProcess();
            while (process.TotalProcessorTime.TotalMilliseconds > wait && wait < 3000) wait += 1000;
            while (process.TotalProcessorTime.TotalMilliseconds < Min(wait, 3000)) ;
            Environment.Exit(1);
        };

        InitInput(Console.OpenStandardInput());
        InitOutput(Console.OpenStandardOutput());

        new Solution().Solve();

        Flush();
        Console.Error.WriteLine(Process.GetCurrentProcess().TotalProcessorTime);
    }
    #endregion
    #endregion
}
